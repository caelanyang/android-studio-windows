<application>
  <component name="AppStorage">
    <histories>
      <item value="HOST FORMAL" />
      <item value="服务器" />
      <item value="HOST" />
      <item value="描述" />
      <item value="Scrim" />
      <item value="opacity" />
      <item value="op" />
      <item value="The RecycleBin facilitates reuse of views across layouts. The RecycleBin has two levels of * storage: ActiveViews and ScrapViews. ActiveViews are those views which were onscreen at the * start of a layout. By construction, they are displaying current information. At the end of * layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews are old views that * could potentially be used by the adapter to avoid allocating views unnecessarily." />
      <item value="Glide" />
      <item value="collapsed" />
      <item value="Constraint" />
      <item value="canvas" />
      <item value="标签" />
      <item value="data Source" />
      <item value="set Data Source" />
      <item value="Context" />
      <item value="Super View Holder" />
      <item value="Super Adapter" />
      <item value="Item Binder" />
      <item value="with" />
      <item value="If two objects are equal according to the {@code equals(Object)} * method, then calling the {@code hashCode} method on each of * the two objects must produce the same integer result." />
      <item value="Whenever it is invoked on the same object more than once during * an execution of a Java application, the {@code hashCode} method * must consistently return the same integer, provided no information * used in {@code equals} comparisons on the object is modified. * This integer need not remain consistent from one execution of an * application to another execution of the same application." />
      <item value="Whenever it is invoked on the same object more than once during * an execution of a Java application, the {@code hashCode} method * must consistently return the same integer, provided no information * used in {@code equals} comparisons on the object is modified. * This integer need not remain consistent from one execution of an * application to another execution of the same application. * &lt;li&gt;If two objects are equal according to the {@code equals(Object)} * method, then calling the {@code hashCode} method on each of * the two objects must produce the same integer result. * &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal * according to the {@link java.lang.Object#equals(java.lang.Object)} * method, then calling the {@code hashCode} method on each of the * two objects must produce distinct integer results. However, the * programmer should be aware that producing distinct integer results * for unequal objects may improve the performance of hash tables." />
      <item value="true if the callback consumed the long click, false otherwise." />
      <item value="obsolete" />
      <item value="aspect" />
      <item value="Mall" />
      <item value="statistics" />
      <item value="统计" />
      <item value="audience" />
      <item value="representing" />
      <item value="integrate" />
      <item value="populate" />
      <item value="forwards" />
      <item value="health" />
      <item value="Flag for {@link #bindService}: indicates that the client application * binding to this service considers the service to be more important than * the app itself. When set, the platform will try to have the out of * memory killer kill the app before it kills the service it is bound to, though * this is not guaranteed to be the case." />
      <item value="Stub" />
      <item value="iab" />
      <item value="Relative Layout" />
    </histories>
  </component>
</application>